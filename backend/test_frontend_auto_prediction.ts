import axios from 'axios';

// Test t√≠nh nƒÉng m·ªõi: Auto prediction khi ·∫•n "X√°c nh·∫≠n" trong TutorialPrediction
async function testFrontendAutoPrediction() {
  console.log('üß™ Testing Frontend Auto Prediction Feature');
  console.log('============================================\n');
  
  const BASE_URL = 'http://localhost:3000';
  const USER_ID = 1;
  
  try {
    console.log('üéØ Test: Endpoint m·ªõi updatePartTimeHoursWithAutoPrediction...\n');
    
    // Test endpoint m·ªõi m√† frontend s·∫Ω g·ªçi khi user ·∫•n "X√°c nh·∫≠n"
    const response = await axios.post(
      `${BASE_URL}/api/part-time-hour-saves/update-part-time-hours-with-smart-prediction`,
      {
        userId: USER_ID,
        partTimeHours: 30, // Ng∆∞·ªùi d√πng nh·∫≠p 30 gi·ªù/tu·∫ßn
        viewMode: 'semester'
      },
      {
        headers: { 'Content-Type': 'application/json' },
        timeout: 60000 // 60 seconds timeout
      }
    );
    
    console.log('‚úÖ Response Status:', response.status);
    console.log('üìä Response Data:', JSON.stringify(response.data, null, 2));
    
    // Ki·ªÉm tra c√≥ prediction results kh√¥ng
    if (response.data.success && response.data.data?.predictionResult?.data?.length > 0) {
      const predictionCount = response.data.data.predictionResult.data.length;
      console.log(`\nüéâ SUCCESS: T·ª± ƒë·ªông d·ª± ƒëo√°n ${predictionCount} m√¥n h·ªçc!`);
      
      console.log('\nüìà Sample Prediction Results:');
      response.data.data.predictionResult.data.slice(0, 3).forEach((result: any, index: number) => {
        console.log(`  ${index + 1}. ${result.courseCode}`);
        if (result.success && result.predictions) {
          console.log(`     üìö Weekly Study Hours: ${result.predictions.predicted_weekly_study_hours?.toFixed(1)}`);
          console.log(`     üéØ Attendance %: ${result.predictions.predicted_attendance_percentage?.toFixed(1)}%`);
        }
      });
      
      console.log('\n‚úÖ Frontend s·∫Ω hi·ªÉn th·ªã:');
      console.log(`   - Success toast: "ƒê√£ t·∫£i v√† l∆∞u d·ªØ li·ªáu theo k·ª≥ th√†nh c√¥ng v√† t·ª± ƒë·ªông d·ª± ƒëo√°n ${predictionCount} m√¥n h·ªçc"`);
      console.log(`   - Prediction results component v·ªõi ${predictionCount} records`);
      console.log('   - Real-time updates trong UI');
      
    } else {
      console.log('\n‚ö†Ô∏è  No predictions were made - this might be expected if:');
      console.log('   - No records have rawScore > 0');
      console.log('   - All eligible records already have predictions');
      console.log('   - Missing survey data (financialSupport/emotionalSupport)');
    }
    
    console.log('\nüîó User Experience Flow:');
    console.log('1. User nh·∫≠p part-time hours trong frontend');
    console.log('2. User click "X√°c nh·∫≠n" button');
    console.log('3. Frontend g·ªçi updatePartTimeHoursWithAutoPrediction API');
    console.log('4. Backend t·ª± ƒë·ªông:');
    console.log('   - Update part-time hours cho t·∫•t c·∫£ records');
    console.log('   - Trigger auto prediction cho records c√≥ rawScore > 0');
    console.log('   - Return c·∫£ update results V√Ä prediction results');
    console.log('5. Frontend hi·ªÉn th·ªã:');
    console.log('   - Success message v·ªõi s·ªë l∆∞·ª£ng predictions');
    console.log('   - Prediction results component');
    console.log('   - Updated academic statistics');
    
  } catch (error: any) {
    console.error('\n‚ùå Test failed:', error.response?.data || error.message);
    
    if (error.response) {
      console.error('Status:', error.response.status);
      console.error('Data:', JSON.stringify(error.response.data, null, 2));
    }
  }
}

// Ki·ªÉm tra endpoint c√≥ ho·∫°t ƒë·ªông kh√¥ng
async function checkEndpointAvailability() {
  console.log('üîç Checking endpoint availability...\n');
  
  try {
    const response = await axios.get('http://localhost:3000');
    console.log('‚úÖ Backend is running');
    
    const mlResponse = await axios.get('http://localhost:8000');
    console.log('‚úÖ ML Service is running');
    
    console.log('‚úÖ All services are ready for testing\n');
    return true;
  } catch (error) {
    console.error('‚ùå Some services are not running');
    return false;
  }
}

// Main execution
async function main() {
  const isReady = await checkEndpointAvailability();
  
  if (isReady) {
    await testFrontendAutoPrediction();
  } else {
    console.log('Please start backend and ML service first');
  }
}

// Run if this file is executed directly
if (require.main === module) {
  main().catch(console.error);
}

export { testFrontendAutoPrediction };
